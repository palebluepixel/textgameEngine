Aidan Sadowski

### Project Goals

My original goal for the project was to create a text-based video game because I thought that sounded like a fun porject. Then, I wanted to learn more about how to build the infrastructure for a game from the ground up, so I changed my goal to focus on making an engine for text-based video games in C++, with the additional goal of creating a short working example of a game for the demo. I submitted that as my project description and got your feedback that doing things in just C++ is outdated and that I ought to look into scripting, so I followed that advice and changed the project goal to: 

* Learn how to utilize lua scripting in C++ using a text-based video game engine as a case study.

This had the subgoals of:
	* Learn how to create C++ objects and data structures from lua tables
	* Learn how to write lua scripts that modify C++ data
	* Seperate the engine code and gameplay code such that all engine stuff is in C++ and all gameplay (like item properties, what actions can be taken on which items, etc) is in lua scripts.


### Libraries Used

I used lua 5.2.4 as my scripting language. I also used sol2, a lua binding library, which handles most of the details of passing information between C++ and lua.


### Simplifying Assumptions

All user input is constrained to either match a command given in parserCommands.lua exactly, or else be of the form "[verb] [noun]",
where noun is the name of an object in the world and verb is a valid entry in that object's verb table (more on that later). This has the limitation that a player cannot explicitly use an item on another item, or expliclty combine items.

All objects in the world must have a unique name. 


### Summary of Design

The engine was designed to be highly customizable by the lua scripts. The C++ engine mostly just stores data in an accessible way and the functions written in lua scripts determine how objects change as they are interacted with by the player. 

The C++ side of the engine is very similar to my original project description. There are Objects, Rooms, Exits, and a Player. 

An Object has a hashmap of properties (map: string -> sol::type). A property is a datafield which can have any type that a lua object can have. For example, an object can have a property named "activated" that stores an integer indicating if the player has activated this object. Other functions in the lua scripts can use the properties of objects to determine the result of player interactions. The properties that an object has (and their initial values) is declared in the lua script used to create the object. 

An Object also has a hashmap of references to lua functions (map: string -> sol::function). This map is called the verb map. Whenever the player gives input like "pull lever", the parser finds the object named "lever" and calls the entry in the verb table for "pull", if it exists. All player interaction with objects goes through the verb map. The function for each verb is set by the lua script used to create the object.

Rooms and Exits are subclasses of Objects, so they can also have properties. They also have additional fields:

A Room has a list of Objects within it, and a list of Exits leading out of it. It also has an onEnter function which triggers when the player enters the room and an onLeave function that triggers when the player leaves. For example, a room filled with poisinous gas might damage the player when they walk into it; this can be implemented in the onEnter function. These functions are defined in the lua scripts used to create the rooms. 

An Exit has the room it comes from and the room it leads to (exits are one-directional). It has a condition function that is checked by the C++ engine when the player tries to move through the exit. It has an onPass and onFail function, the first is called when the player can pass through the exit (the condition function returns 1) and the latter is called when the player cannot. For example, trying to climb an electric fence before deactivating it could both not let the player pass, and damage them / burn up an item in their inventory. These functions are defined by the lua scripts.

The Player has a list of objects which is their inventory. The player does not currently have properties due to time constraints, but an obvious extension of this engine would be to give the player properties to represent things like health and status conditions.


### Places for Extension

* Allowing player input to be of more complicated forms, allow using one object on ahother
* 

### Conclusion

I consider the project a success as I was able to create an engine that is very flexible and has almost all of the gameplay defined in lua scripts rather than in the engine itself. I learned a lot about integrating scripts into C++ which was a topic that I previously knew absolutely nothing about. The engine definitely has its flaws and limitations, but it is completely functional and, as I hope to show in my demo, easy to create a fun game in it. 
